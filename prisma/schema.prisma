generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = "file:./dev.db?connection_limit=1"
}

model User {
    id              String      @id @default(uuid())
    email           String      @unique
    name            String
    real            Boolean     @default(false)
    impersonating   User?       @relation("Impersonating", fields: [impersonatingId], references: [id])
    impersonatingId String?
    goals           Goal[]
    groups          UserGroup[]
    impersonators   User[]      @relation("Impersonating")
}

model Goal {
    id          String          @id @default(uuid())
    description String
    completed   Boolean         @default(false)
    user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    groups      UserGroupGoal[]
    commits     Commit[]
}

model Commit {
    id          String   @id @default(uuid())
    createdAt   DateTime @default(now())
    description String   @default("")
    hours       Float    @default(0)
    goal        Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)
    goalId      String
}

model Group {
    id       String      @id @default(uuid())
    joinCode String      @unique
    name     String
    timeZone String
    users    UserGroup[]
}

model UserGroup {
    user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String
    group   Group           @relation(fields: [groupId], references: [id], onDelete: Cascade)
    groupId String
    goals   UserGroupGoal[]

    @@id([userId, groupId])
}

model UserGroupGoal {
    userGroup UserGroup @relation(fields: [userId, groupId], references: [userId, groupId], onDelete: Cascade)
    userId    String
    groupId   String
    goal      Goal      @relation(fields: [goalId], references: [id], onDelete: Cascade)
    goalId    String

    @@id([groupId, goalId])
}
